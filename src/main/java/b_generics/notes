Overloading a Generic Method
Only one of these two methods is allowed in a class because type erasure will reduce both
sets of arguments to (List input):
public class LongTailAnimal {
protected void chew(List<Object> input) {}
protected void chew(List<Double> input) {} // DOES NOT COMPILE
}
For the same reason, you also can’t overload a generic method from a parent class.
public class LongTailAnimal {
protected void chew(List<Object> input) {}
}
public class Anteater extends LongTailAnimal {
protected void chew(List<Double> input) {} // DOES NOT COMPILE
}
Both of these examples fail to compile because of type erasure. In the compiled form, the
generic type is dropped, and it appears as an invalid overloaded method. Now, let’s look at
a subclass:
public class Anteater extends LongTailAnimal {
protected void chew(List<Object> input) {}
protected void chew(ArrayList<Double> input) {}
}
The first chew() method compiles because it uses the same generic type in the overridden
method as the one defined in the parent class. The second chew() method compiles as well.

However, it is an overloaded method because one of the method arguments is a List and
the other is an ArrayList. When working with generic methods, it’s important to consider
the underlying type.


When you’re working with overridden methods that return generics, the return values must
be covariant. In terms of generics, this means that the return type of the class or interface
declared in the overriding method must be a subtype of the class defined in the parent class.
The generic parameter type must match its parent’s type exactly.
Given the following declaration for the Mammal class, which of the two subclasses,
Monkey and Goat, compile?
public class Mammal {
public List<CharSequence> play() { ... }
public CharSequence sleep() { ... }
}
public class Monkey extends Mammal {
public ArrayList<CharSequence> play() { ... }
}
public class Goat extends Mammal {
public List<String> play() { ... } // DOES NOT COMPILE
public String sleep() { ... }
}
The Monkey class compiles because ArrayList is a subtype of List. The play() method
in the Goat class does not compile, though. For the return types to be covariant, the generic
type parameter must match. Even though String is a subtype of CharSequence, it does not
exactly match the generic type defined in the Mammal class. Therefore, this is considered an
invalid override.

Notice that the sleep() method in the Goat class does compile since String is a subtype of
CharSequence. This example shows that covariance applies to the return type, just not the
generic parameter type.
For the exam, it might be helpful for you to apply type erasure to questions involving
generics to ensure that they compile properly. Once you’ve determined which methods are
overridden and which are being overloaded, work backward, making sure the generic types
match for overridden methods. And remember, generic methods cannot be overloaded by
changing the generic parameter type only.